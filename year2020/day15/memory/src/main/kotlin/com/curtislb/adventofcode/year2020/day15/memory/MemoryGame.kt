package com.curtislb.adventofcode.year2020.day15.memory

/**
 * A memory game in which new numbers are generated by following a set of rules based on previous numbers.
 *
 * The game begins with a list of starting numbers. Then, each turn consists of considering the latest number:
 * - If that was the first time the number occurred, the next number is 0.
 * - Otherwise, the next number is the turns apart the latest number is from when it was previously spoken.
 *
 * @param startingNumbers A list of starting numbers used to begin the game.
 */
class MemoryGame(private val startingNumbers: List<Int>) {
    /**
     * An ordinal number representing the current turn.
     */
    var currentTurn: Int = 0
        private set

    /**
     * The number produced on the [currentTurn] of the game, if any.
     */
    var lastNumber: Int? = null
        private set

    /**
     * A map from each number that has occurred in the game to the latest turn it was produced.
     */
    private var numberTurnMap: MutableMap<Int, Int> = mutableMapOf()

    /**
     * Plays the game for a number of turns equal to [turnCount].
     *
     * @throws IllegalArgumentException If [turnCount] is negative.
     */
    fun playTurns(turnCount: Int) {
        require(turnCount >= 0) { "Turn count must be non-negative: $turnCount" }
        repeat(turnCount) {
            currentTurn++
            val newLastNumber = if (currentTurn <= startingNumbers.size) {
                startingNumbers[currentTurn - 1]
            } else {
                numberTurnMap[lastNumber]?.let { currentTurn - 1 - it } ?: 0
            }
            lastNumber?.let { numberTurnMap[it] = currentTurn - 1 }
            lastNumber = newLastNumber
        }
    }

    /**
     * Restores the game to its starting state, immediately after initialization.
     */
    fun reset() {
        currentTurn = 0
        lastNumber = null
        numberTurnMap = mutableMapOf()
    }
}
